#include <iostream>

void merge(int arr[], int l, int m, int r)
{
	int i, j, k;
	//find left and right arrays length
	int lenleft = m - l + 1;
	int lenright = r - m;

	//create the two arrays
	int *left = new int[lenleft];
	int *right = new int[lenright];

	//fill them with the elements from the initial array
	for (i = 0; i < m; i++)
	{
		left[i] = arr[l + i];
	}
	for (j = 0; j < r; j++)
	{
		right[j] = arr[m + 1 + j];
	}

	i = 0; //initial index of left arr
	j = 0; //initial index of right arr
	k = l; //initial index of result arr

	//return elements in initial array while sorting them
	while (i < lenleft && j < lenright)
	{
		if (left[i] <= right[j])
		{
			arr[k] = left[i];
			i++;
		}
		else
		{
			arr[k] = right[j];
			j++;
		}
		k++;
	}
	//if there are any elements left
	while (i < lenleft)
	{
		arr[k] = left[i];
		k++;
		i++;
	}
	while (j < lenright)
	{
		arr[k] = right[j];
		k++;
		j++;
	}
}

void mergesort(int arr[], int l, int r)
{
	if (l < r)
	{
		int m = (l + r) / 2;
		mergesort(arr, l, m);
		mergesort(arr, m + 1, r);
		merge(arr, l, m, r);
	}
}

int main()
{
	int count;
	std::cin >> count;

	int *arr = new int[count];

	for (size_t i = 0; i < count; i++)
	{
		std::cin >> arr[i];
	}

	mergesort(arr, 0, count - 1);

	for (size_t i = 0; i < count; i++)
	{
		std::cout << arr[i] << " ";
	}

	system("pause");
	return 0;
}
